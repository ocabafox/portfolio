{
  "title": "Clean Code 101 — Meaningful Names and Functions",
  "description": "Essential tips and best practices for writing clean, readable code with meaningful names and well-structured functions.",
  "date": "2025-08-24T00:00:00.000Z",
  "published": true,
  "tags": [
    "clean-code",
    "best-practices",
    "software-development",
    "programming"
  ],
  "featured": false,
  "body": {
    "raw": "\n# Clean Code 101 — Meaningful Names and Functions\n\nWriting clean code is one of the most important skills a developer can master. This article covers fundamental principles for creating code that is not only functional but also readable, maintainable, and elegant.\n\n> \"You know you are working on clean code when each routine you read turns out to be pretty much what you expected. You can call it beautiful code when the code also makes it look like the language was made for the problem.\"\n> — Ward Cunningham\n\nThe ratio of time spent reading vs writing code is well over 10:1. We are constantly reading code to write new code. This means we should prioritize readable code over code that's merely easier to write.\n\n## Meaningful Names\n\n### Use Intention-Revealing Names\n\nThe name of a variable, function, or class should answer all the big questions: why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.\n\n**Bad:**\n```js\nint d; // elapsed time in days\n```\n\n**Good:**\n```js\nint elapsedTimeInDays;\n```\n\n### Avoid Similar Names\n\nBeware of using names which vary in small ways. Consider these two examples:\n- `XYZControllerForEfficientHandlingOfStrings`\n- `XYZControllerForEfficientStorageOfStrings`\n\nHow long did it take you to spot the difference? This rule also improves IDE search and autocompletion functionality.\n\n### Use Pronounceable Names\n\n**Bad:**\n```java\nclass DtaRcrd102 {\n    private Date genymdhms;\n    private Date modymdhms;\n}\n```\n\n**Good:**\n```java\nclass Customer {\n    private Date generationTimestamp;\n    private Date modificationTimestamp;\n}\n```\n\n### Use Searchable Names\n\nIf a variable or constant might be seen or used in multiple places, give it a search-friendly name.\n\n**Bad:**\n```js\nfor (int j = 0; j < 34; j++) {\n    s += (t[j] * 4) / 5;\n}\n```\n\n**Good:**\n```js\nint realDaysPerIdealDay = 4;\nconst int WORK_DAYS_PER_WEEK = 5;\nint sum = 0;\nfor (int j = 0; j < NUMBER_OF_TASKS; j++) {\n    int realTaskDays = taskEstimate[j] * realDaysPerIdealDay;\n    int realTaskWeeks = (realTaskDays / WORK_DAYS_PER_WEEK);\n    sum += realTaskWeeks;\n}\n```\n\n### Naming Conventions\n\n**Class Names:** Should be nouns or noun phrases like `Customer`, `WikiPage`, `Account`, and `AddressParser`. Avoid words like `Manager`, `Processor`, `Data`, or `Info`.\n\n**Method Names:** Should be verbs or verb phrases like `postPayment`, `deletePage`, or `save`.\n\n**Constructor Overloading:** Use static factory methods with descriptive names:\n\n**Bad:**\n```java\nComplex fulcrumPoint = new Complex(23.0);\n```\n\n**Good:**\n```java\nComplex fulcrumPoint = Complex.FromRealNumber(23.0);\n```\n\n### Pick One Word Per Concept\n\nConsistency is crucial. Don't use `fetch`, `retrieve`, and `get` as equivalent methods in different classes. Pick one word for one abstract concept and stick with it throughout your codebase.\n\n## Functions\n\n### Keep Functions Small\n\n> \"The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.\"\n\n**Before:**\n```java\npublic static String renderPageWithSetupAndTeardowns(\n    PageData pageData, boolean isSuite\n) throws Exception {\n    boolean isTestPage = pageData.hasAttribute(\"Test\");\n    if (isTestPage) {\n        WikiPage testPage = pageData.getWikiPage();\n        StringBuffer newPageContent = new StringBuffer();\n        includeSetupPages(testPage, newPageContent, isSuite);\n        newPageContent.append(pageData.getContent());\n        includeTeardownPages(testPage, newPageContent, isSuite);\n        pageData.setContent(newPageContent.toString());\n    }\n    \n    return pageData.getHtml();\n}\n```\n\n**After:**\n```java\npublic static String renderPageWithSetupAndTeardowns(\n    PageData pageData, boolean isSuite\n) throws Exception {\n    if (isTestPage(pageData)) {\n        includeSetupAndTeardownPages(pageData, isSuite);\n    }\n    \n    return pageData.getHtml();\n}\n```\n\n### Do One Thing\n\nFunctions should do one thing and do it well. The blocks within `if`, `else`, and `while` statements should ideally be one line long—probably a function call.\n\nTo determine if a function does one thing, describe it with a brief \"TO\" paragraph:\n\n*\"TO RenderPageWithSetupsAndTeardowns, we check to see whether the page is a test page and if so, we include the setups and teardowns. In either case we render the page in HTML.\"*\n\n### The Stepdown Rule\n\nCode should read like a top-down narrative. Each function should be followed by those at the next level of abstraction, creating a series of \"TO\" paragraphs:\n\n- *To include the setups and teardowns, we include setups, then the test page content, then teardowns.*\n- *To include the setups, we include the suite setup if this is a suite, then the regular setup.*\n- *To include the suite setup, we search the parent hierarchy for the \"SuiteSetUp\" page...*\n\n### Handle Switch Statements Carefully\n\nSwitch statements are inherently problematic—they're large and violate the Single Responsibility Principle. Use polymorphism to bury them in low-level classes:\n\n**Bad:**\n```java\npublic Money calculatePay(Employee e) throws InvalidEmployeeType {\n    switch (e.type) {\n        case COMMISSIONED:\n            return calculateCommissionedPay(e);\n        case HOURLY:\n            return calculateHourlyPay(e);\n        default:\n            throw new InvalidEmployeeType(e.type);\n    }\n}\n```\n\n**Good:**\n```java\npublic abstract class Employee {\n    public abstract boolean isPayDay();\n    public abstract Money calculatePay();\n    public abstract void deliverPay(Money pay);\n}\n\npublic interface EmployeeFactory {\n    public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType;\n}\n\npublic class EmployeeFactoryImpl implements EmployeeFactory {\n    public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType {\n        switch (r.type) {\n            case COMMISSIONED:\n                return new CommissionedEmployee(r);\n            case HOURLY:\n                return new HourlyEmployee(r);\n            default:\n                throw new InvalidEmployeeType(r.type);\n        }\n    }\n}\n```\n\n### Minimize Function Arguments\n\nThe ideal number of arguments:\n- **Zero (niladic)** - ideal\n- **One (monadic)** - good\n- **Two (dyadic)** - acceptable\n- **Three (triadic)** - avoid if possible\n- **More than three (polyadic)** - requires special justification\n\n**Monadic Example:**\n```java\nboolean fileExists(\"MyFile\") // Asking a question about the argument\n```\n\n**Dyadic Example:**\n```java\n// Less clear\nwriteField(outputStream, name)\n\n// More clear\nwriteField(name)\n\n// Acceptable when arguments form a cohesive unit\nPoint p = new Point(0, 0)\n```\n\n### Use Argument Objects\n\nWhen functions need more than two or three arguments, consider wrapping them in a class:\n\n**Before:**\n```java\nCircle makeCircle(double x, double y, double radius);\n```\n\n**After:**\n```java\nCircle makeCircle(Point center, double radius);\n```\n\n### Avoid Side Effects\n\nFunctions should do what their name promises and nothing more. Side effects create hidden behaviors that lead to temporal couplings and unexpected dependencies.\n\n### Command/Query Separation\n\nFunctions should either do something or answer something, but not both. This separation makes code more predictable and easier to understand.\n\n## Conclusion\n\nClean code is about communication. Every line of code is a message to future developers (including yourself). By following these principles of meaningful naming and function design, you create code that tells a story—one that's easy to read, understand, and maintain.\n\nRemember: clean code isn't just about following rules; it's about crafting code that serves both the machine and the human mind.\n\n---\n\n*This article is inspired by Robert C. Martin's \"Clean Code: A Handbook of Agile Software Craftsmanship\" and the original [Medium article](https://medium.com/coding-skills/clean-code-101-meaningful-names-and-functions-bf450456d90c) by Miguel Loureiro.*\n",
    "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),N=(a,e)=>{for(var s in e)i(a,s,{get:e[s],enumerable:!0})},c=(a,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of u(e))!g.call(a,l)&&l!==s&&i(a,l,{get:()=>e[l],enumerable:!(r=m(e,l))||r.enumerable});return a};var w=(a,e,s)=>(s=a!=null?p(j(a)):{},c(e||!a||!a.__esModule?i(s,\"default\",{value:a,enumerable:!0}):s,a)),f=a=>c(i({},\"__esModule\",{value:!0}),a);var h=y((P,d)=>{d.exports=_jsx_runtime});var k={};N(k,{default:()=>o,frontmatter:()=>b});var n=w(h()),b={title:\"Clean Code 101 \\u2014 Meaningful Names and Functions\",description:\"Essential tips and best practices for writing clean, readable code with meaningful names and well-structured functions.\",date:\"2025-08-24\",tags:[\"clean-code\",\"best-practices\",\"software-development\",\"programming\"],featured:!1,published:!0};function t(a){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",em:\"em\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"clean-code-101--meaningful-names-and-functions\",children:\"Clean Code 101 \\u2014 Meaningful Names and Functions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Writing clean code is one of the most important skills a developer can master. This article covers fundamental principles for creating code that is not only functional but also readable, maintainable, and elegant.\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`\"You know you are working on clean code when each routine you read turns out to be pretty much what you expected. You can call it beautiful code when the code also makes it look like the language was made for the problem.\"\n\\u2014 Ward Cunningham`}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The ratio of time spent reading vs writing code is well over 10:1. We are constantly reading code to write new code. This means we should prioritize readable code over code that's merely easier to write.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"meaningful-names\",children:\"Meaningful Names\"}),`\n`,(0,n.jsx)(e.h3,{id:\"use-intention-revealing-names\",children:\"Use Intention-Revealing Names\"}),`\n`,(0,n.jsx)(e.p,{children:\"The name of a variable, function, or class should answer all the big questions: why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Bad:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[\"int d; \",(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// elapsed time in days\"}),`\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Good:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"hljs language-js\",children:`int elapsedTimeInDays;\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"avoid-similar-names\",children:\"Avoid Similar Names\"}),`\n`,(0,n.jsx)(e.p,{children:\"Beware of using names which vary in small ways. Consider these two examples:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"XYZControllerForEfficientHandlingOfStrings\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"XYZControllerForEfficientStorageOfStrings\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"How long did it take you to spot the difference? This rule also improves IDE search and autocompletion functionality.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"use-pronounceable-names\",children:\"Use Pronounceable Names\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Bad:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"class\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"DtaRcrd102\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"private\"}),` Date genymdhms;\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"private\"}),` Date modymdhms;\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Good:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"class\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Customer\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"private\"}),` Date generationTimestamp;\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"private\"}),` Date modificationTimestamp;\n}\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"use-searchable-names\",children:\"Use Searchable Names\"}),`\n`,(0,n.jsx)(e.p,{children:\"If a variable or constant might be seen or used in multiple places, give it a search-friendly name.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Bad:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"for\"}),\" (int j = \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),\"; j < \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"34\"}),`; j++) {\n    s += (t[j] * `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"4\"}),\") / \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"5\"}),`;\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Good:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[\"int realDaysPerIdealDay = \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"4\"}),`;\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" int \",(0,n.jsx)(e.span,{className:\"hljs-variable constant_\",children:\"WORK_DAYS_PER_WEEK\"}),\" = \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"5\"}),`;\nint sum = `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),`;\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"for\"}),\" (int j = \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),\"; j < \",(0,n.jsx)(e.span,{className:\"hljs-variable constant_\",children:\"NUMBER_OF_TASKS\"}),`; j++) {\n    int realTaskDays = taskEstimate[j] * realDaysPerIdealDay;\n    int realTaskWeeks = (realTaskDays / `,(0,n.jsx)(e.span,{className:\"hljs-variable constant_\",children:\"WORK_DAYS_PER_WEEK\"}),`);\n    sum += realTaskWeeks;\n}\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"naming-conventions\",children:\"Naming Conventions\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Class Names:\"}),\" Should be nouns or noun phrases like \",(0,n.jsx)(e.code,{children:\"Customer\"}),\", \",(0,n.jsx)(e.code,{children:\"WikiPage\"}),\", \",(0,n.jsx)(e.code,{children:\"Account\"}),\", and \",(0,n.jsx)(e.code,{children:\"AddressParser\"}),\". Avoid words like \",(0,n.jsx)(e.code,{children:\"Manager\"}),\", \",(0,n.jsx)(e.code,{children:\"Processor\"}),\", \",(0,n.jsx)(e.code,{children:\"Data\"}),\", or \",(0,n.jsx)(e.code,{children:\"Info\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Method Names:\"}),\" Should be verbs or verb phrases like \",(0,n.jsx)(e.code,{children:\"postPayment\"}),\", \",(0,n.jsx)(e.code,{children:\"deletePage\"}),\", or \",(0,n.jsx)(e.code,{children:\"save\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Constructor Overloading:\"}),\" Use static factory methods with descriptive names:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Bad:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"Complex\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"fulcrumPoint\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Complex\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"23.0\"}),`);\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Good:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"Complex\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"fulcrumPoint\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),\" Complex.FromRealNumber(\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"23.0\"}),`);\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"pick-one-word-per-concept\",children:\"Pick One Word Per Concept\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consistency is crucial. Don't use \",(0,n.jsx)(e.code,{children:\"fetch\"}),\", \",(0,n.jsx)(e.code,{children:\"retrieve\"}),\", and \",(0,n.jsx)(e.code,{children:\"get\"}),\" as equivalent methods in different classes. Pick one word for one abstract concept and stick with it throughout your codebase.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"functions\",children:\"Functions\"}),`\n`,(0,n.jsx)(e.h3,{id:\"keep-functions-small\",children:\"Keep Functions Small\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:'\"The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.\"'}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Before:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"static\"}),\" String \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"renderPageWithSetupAndTeardowns\"}),(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[`(\n    PageData pageData, `,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"boolean\"}),` isSuite\n)`]}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throws\"}),` Exception {\n    `,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"boolean\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"isTestPage\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),\" pageData.hasAttribute(\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:'\"Test\"'}),`);\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"if\"}),` (isTestPage) {\n        `,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"WikiPage\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"testPage\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),` pageData.getWikiPage();\n        `,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"StringBuffer\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"newPageContent\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"StringBuffer\"}),`();\n        includeSetupPages(testPage, newPageContent, isSuite);\n        newPageContent.append(pageData.getContent());\n        includeTeardownPages(testPage, newPageContent, isSuite);\n        pageData.setContent(newPageContent.toString());\n    }\n    \n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` pageData.getHtml();\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"After:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"static\"}),\" String \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"renderPageWithSetupAndTeardowns\"}),(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[`(\n    PageData pageData, `,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"boolean\"}),` isSuite\n)`]}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throws\"}),` Exception {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"if\"}),` (isTestPage(pageData)) {\n        includeSetupAndTeardownPages(pageData, isSuite);\n    }\n    \n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` pageData.getHtml();\n}\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"do-one-thing\",children:\"Do One Thing\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Functions should do one thing and do it well. The blocks within \",(0,n.jsx)(e.code,{children:\"if\"}),\", \",(0,n.jsx)(e.code,{children:\"else\"}),\", and \",(0,n.jsx)(e.code,{children:\"while\"}),\" statements should ideally be one line long\\u2014probably a function call.\"]}),`\n`,(0,n.jsx)(e.p,{children:'To determine if a function does one thing, describe it with a brief \"TO\" paragraph:'}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:'\"TO RenderPageWithSetupsAndTeardowns, we check to see whether the page is a test page and if so, we include the setups and teardowns. In either case we render the page in HTML.\"'})}),`\n`,(0,n.jsx)(e.h3,{id:\"the-stepdown-rule\",children:\"The Stepdown Rule\"}),`\n`,(0,n.jsx)(e.p,{children:'Code should read like a top-down narrative. Each function should be followed by those at the next level of abstraction, creating a series of \"TO\" paragraphs:'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.em,{children:\"To include the setups and teardowns, we include setups, then the test page content, then teardowns.\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.em,{children:\"To include the setups, we include the suite setup if this is a suite, then the regular setup.\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.em,{children:'To include the suite setup, we search the parent hierarchy for the \"SuiteSetUp\" page...'})}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"handle-switch-statements-carefully\",children:\"Handle Switch Statements Carefully\"}),`\n`,(0,n.jsx)(e.p,{children:\"Switch statements are inherently problematic\\u2014they're large and violate the Single Responsibility Principle. Use polymorphism to bury them in low-level classes:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Bad:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" Money \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"calculatePay\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"(Employee e)\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throws\"}),` InvalidEmployeeType {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"switch\"}),` (e.type) {\n        `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"case\"}),` COMMISSIONED:\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` calculateCommissionedPay(e);\n        `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"case\"}),` HOURLY:\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` calculateHourlyPay(e);\n        `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"default\"}),`:\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throw\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"InvalidEmployeeType\"}),`(e.type);\n    }\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Good:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"abstract\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"class\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Employee\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"abstract\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"boolean\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"isPayDay\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"()\"}),`;\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"abstract\"}),\" Money \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"calculatePay\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"()\"}),`;\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"abstract\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"void\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"deliverPay\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"(Money pay)\"}),`;\n}\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"interface\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"EmployeeFactory\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" Employee \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"makeEmployee\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"(EmployeeRecord r)\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throws\"}),` InvalidEmployeeType;\n}\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"class\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"EmployeeFactoryImpl\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"implements\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"EmployeeFactory\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"public\"}),\" Employee \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"makeEmployee\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"(EmployeeRecord r)\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throws\"}),` InvalidEmployeeType {\n        `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"switch\"}),` (r.type) {\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"case\"}),` COMMISSIONED:\n                `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"CommissionedEmployee\"}),`(r);\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"case\"}),` HOURLY:\n                `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"HourlyEmployee\"}),`(r);\n            `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"default\"}),`:\n                `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"throw\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"InvalidEmployeeType\"}),`(r.type);\n        }\n    }\n}\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"minimize-function-arguments\",children:\"Minimize Function Arguments\"}),`\n`,(0,n.jsx)(e.p,{children:\"The ideal number of arguments:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Zero (niladic)\"}),\" - ideal\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"One (monadic)\"}),\" - good\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two (dyadic)\"}),\" - acceptable\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Three (triadic)\"}),\" - avoid if possible\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"More than three (polyadic)\"}),\" - requires special justification\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Monadic Example:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"boolean\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"fileExists\"}),(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[\"(\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:'\"MyFile\"'}),\")\"]}),\" \",(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// Asking a question about the argument\"}),`\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Dyadic Example:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// Less clear\"}),`\nwriteField(outputStream, name)\n\n`,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// More clear\"}),`\nwriteField(name)\n\n`,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// Acceptable when arguments form a cohesive unit\"}),`\n`,(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"Point\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-variable\",children:\"p\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Point\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),\", \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),`)\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"use-argument-objects\",children:\"Use Argument Objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"When functions need more than two or three arguments, consider wrapping them in a class:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Before:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[\"Circle \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"makeCircle\"}),(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[\"(\",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"double\"}),\" x, \",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"double\"}),\" y, \",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"double\"}),\" radius)\"]}),`;\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"After:\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-java\",children:[\"Circle \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"makeCircle\"}),(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[\"(Point center, \",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"double\"}),\" radius)\"]}),`;\n`]})}),`\n`,(0,n.jsx)(e.h3,{id:\"avoid-side-effects\",children:\"Avoid Side Effects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Functions should do what their name promises and nothing more. Side effects create hidden behaviors that lead to temporal couplings and unexpected dependencies.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"commandquery-separation\",children:\"Command/Query Separation\"}),`\n`,(0,n.jsx)(e.p,{children:\"Functions should either do something or answer something, but not both. This separation makes code more predictable and easier to understand.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Clean code is about communication. Every line of code is a message to future developers (including yourself). By following these principles of meaningful naming and function design, you create code that tells a story\\u2014one that's easy to read, understand, and maintain.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Remember: clean code isn't just about following rules; it's about crafting code that serves both the machine and the human mind.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[`This article is inspired by Robert C. Martin's \"Clean Code: A Handbook of Agile Software Craftsmanship\" and the original `,(0,n.jsx)(e.a,{href:\"https://medium.com/coding-skills/clean-code-101-meaningful-names-and-functions-bf450456d90c\",children:\"Medium article\"}),\" by Miguel Loureiro.\"]})})]})}function o(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(t,{...a})}):t(a)}return f(k);})();\n;return Component;"
  },
  "_id": "blog/clean-code-101.mdx",
  "_raw": {
    "sourceFilePath": "blog/clean-code-101.mdx",
    "sourceFileName": "clean-code-101.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/clean-code-101"
  },
  "type": "Post",
  "url": "/blog/clean-code-101",
  "slug": "clean-code-101",
  "readTime": 6
}